name: Combine end user packages in a single docker image

on:
  workflow_dispatch:
    inputs:
      scalar-type:
        description: "PETSc scalar type"
  workflow_call:
    inputs:
      scalar-type:
        description: "PETSc scalar type"
        type: string
    secrets:
      WEB_USER:
        description: "Username on the web server"
      WEB_SSH_PRIVATE_KEY:
        description: "Private key that enables writing to the web server"
      WEB_SERVER:
        description: "Fully qualified hostname of the web server for upload"
      WEB_HOME:
        description: "Local path on the web server where uploaded files should be stored"
      WEB_URL:
        description: "Public url of the web server where files can be downloaded from"

env:
  CONTAINER_NAME: numericalpdes

jobs:
  release:
    strategy:
      matrix:
        include:
          - arch: amd64
            os: ubuntu-latest
          - arch: arm64
            os: ubuntu-24.04-arm
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check scalar type
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          if [[ "$SCALAR_TYPE" != "complex" && "$SCALAR_TYPE" != "real" ]]; then
              echo "Expecting scalar type to be either real or complex, but got $SCALAR_TYPE"
              exit 1
          fi
        shell: bash
      - name: Free up disk space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'
          remove-android: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
      - uses: actions/checkout@v4
      - name: Determine image name
        id: image_name
        run: |
          LIBRARY=${{ (inputs || github.event.inputs).library }}
          ARCH=${{ matrix.arch }}
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          IMAGE_NAME=ghcr.io/numericalpdes/numericalpdes-${SCALAR_TYPE}:latest-${ARCH}
          echo "image_name=${IMAGE_NAME}" >> ${GITHUB_OUTPUT}
      - name: Build docker image
        run: |
          ARCH=${{ matrix.arch }}
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          IMAGE_NAME="${{ steps.image_name.outputs.image_name }}"
          docker build --pull -t ${IMAGE_NAME} -f numericalpdes/Dockerfile --build-arg ARCH=${ARCH} --build-arg ARGS=${SCALAR_TYPE} .
      - name: Test docker image
        run: |
          ARCH=${{ matrix.arch }}
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          IMAGE_NAME="${{ steps.image_name.outputs.image_name }}"
          docker run -i --entrypoint /usr/bin/env ${IMAGE_NAME} bash -c "/usr/local/share/numerical-pdes-docker/scripts/run_test_notebooks.sh ${ARCH} ${SCALAR_TYPE} fenicsx firedrake gmsh ngsolve"
      - name: Log into the docker registry
        if: github.repository == 'numericalpdes/docker'
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push to the docker registry
        if: github.repository == 'numericalpdes/docker'
        run: |
          IMAGE_NAME="${{ steps.image_name.outputs.image_name }}"
          docker push ${IMAGE_NAME}
        shell: bash
      - name: Export the docker image to a tar file
        if: matrix.arch == 'amd64'
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          IMAGE_NAME="${{ steps.image_name.outputs.image_name }}"
          docker run --entrypoint /usr/bin/env --name ${CONTAINER_NAME}-${SCALAR_TYPE} ${IMAGE_NAME} /bin/bash
          docker export --output=${CONTAINER_NAME}-${SCALAR_TYPE}.tar ${CONTAINER_NAME}-${SCALAR_TYPE}
      - name: Upload to the web server
        if: github.repository == 'numericalpdes/docker' && matrix.arch == 'amd64'
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          mkdir -p ~/.ssh
          echo "${{ secrets.WEB_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -o LogLevel=ERROR ${CONTAINER_NAME}-${SCALAR_TYPE}.tar ${{ secrets.WEB_USER }}@${{ secrets.WEB_SERVER }}:${{ secrets.WEB_HOME }}/${CONTAINER_NAME}-${SCALAR_TYPE}.tar.upl
          ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR ${{ secrets.WEB_USER }}@${{ secrets.WEB_SERVER }} "cd ${{ secrets.WEB_HOME }} && chmod ugo+r ${CONTAINER_NAME}-${SCALAR_TYPE}.tar.upl && mv ${CONTAINER_NAME}-${SCALAR_TYPE}.tar.upl ${CONTAINER_NAME}-${SCALAR_TYPE}.tar"

  publish-multiarch-docker:
    needs: [release]
    if: github.repository == 'numericalpdes/docker'
    runs-on: ubuntu-latest
    steps:
      - name: Determine image name
        id: image_name
        run: |
          LIBRARY=${{ (inputs || github.event.inputs).library }}
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          IMAGE_NAME=ghcr.io/numericalpdes/numericalpdes-${SCALAR_TYPE}:latest
          echo "image_name=${IMAGE_NAME}" >> ${GITHUB_OUTPUT}
      - name: Log into the docker registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push to the docker registry
        run: |
          IMAGE_NAME="${{ steps.image_name.outputs.image_name }}"
          docker buildx imagetools create -t ${IMAGE_NAME} ${IMAGE_NAME}-amd64 ${IMAGE_NAME}-arm64

  wsl:
    runs-on: windows-latest
    needs: [release]
    steps:
      - name: Download archive containing the docker image
        run: |
          $SCALAR_TYPE="${{ (inputs || github.event.inputs).scalar-type }}"
          Import-Module BitsTransfer
          Start-BitsTransfer -Source "${{ secrets.WEB_URL }}/$env:CONTAINER_NAME-$SCALAR_TYPE.tar" -Destination "$env:CONTAINER_NAME-$SCALAR_TYPE.tar"
      - name: Create a new WSL container
        run: |
          $SCALAR_TYPE="${{ (inputs || github.event.inputs).scalar-type }}"
          wsl --import "$env:CONTAINER_NAME-$SCALAR_TYPE" "$env:CONTAINER_NAME-$SCALAR_TYPE.disk" "$env:CONTAINER_NAME-$SCALAR_TYPE.tar"
          Remove-Item -Path "$env:CONTAINER_NAME-$SCALAR_TYPE.tar"
