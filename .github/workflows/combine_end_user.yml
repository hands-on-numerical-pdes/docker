name: Combine end user packages in a single docker image

on:
  workflow_dispatch:
    inputs:
      scalar-type:
        description: "PETSc scalar type"
  workflow_call:
    inputs:
      scalar-type:
        description: "PETSc scalar type"
        type: string
    secrets:
      CI_REGISTRY_USER:
        description: "Docker Hub username"
      CI_REGISTRY_PASSWORD:
        description: "Token that enables writing to Docker Hub"
      WEB_USER:
        description: "Username on the web server"
      WEB_SSH_PRIVATE_KEY:
        description: "Private key that enables writing to the web server"
      WEB_SERVER:
        description: "Fully qualified hostname of the web server for upload"
      WEB_HOME:
        description: "Local path on the web server where uploaded files should be stored"
      WEB_URL:
        description: "Public url of the web server where files can be downloaded from"

env:
  IMAGE_NAME: numericalpdes/numericalpdes:latest
  CONTAINER_NAME: numericalpdes

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Check scalar type
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          if [[ "$SCALAR_TYPE" != "complex" && "$SCALAR_TYPE" != "real" ]]; then
              echo "Expecting scalar type to be either real or complex, but got $SCALAR_TYPE"
              exit 1
          fi
        shell: bash
      - name: Free up disk space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'
          remove-android: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
      - uses: actions/checkout@v4

      - name: Enable experimental docker features
        run: |
          sudo sed -i 's/}/,"experimental": true}/' /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Build docker image
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          DOCKER_BUILDKIT=0 docker build --pull --squash -t ${IMAGE_NAME}-${SCALAR_TYPE} -f numericalpdes/Dockerfile --build-arg ARGS=${SCALAR_TYPE} .
      - name: Test docker image
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          docker run -i --entrypoint /usr/bin/env ${IMAGE_NAME}-${SCALAR_TYPE} bash -c "/usr/local/share/numerical-pdes-docker/scripts/run_test_notebooks.sh ${SCALAR_TYPE} fenicsx firedrake gmsh ngsolve"
      - name: Create an archive of test directory in case of failure
        if: failure() || cancelled()
        run: |
          FAILED_CONTAINER=$(docker ps -l -q)
          docker cp ${FAILED_CONTAINER}:/usr/local/share/fem-on-colab /tmp/test-failure
          tar czf test.tar.gz /tmp/test-failure
      - name: Log into the docker registry
        if: github.repository == 'numericalpdes/docker'
        run: docker login -u ${{ secrets.CI_REGISTRY_USER }} -p ${{ secrets.CI_REGISTRY_PASSWORD }}
      - name: Push to the docker registry
        if: github.repository == 'numericalpdes/docker'
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          docker push ${IMAGE_NAME}-${SCALAR_TYPE}
          if [[ "${SCALAR_TYPE}" == "real" ]]; then
            docker tag ${IMAGE_NAME}-${SCALAR_TYPE} ${IMAGE_NAME}
            docker push ${IMAGE_NAME}
          fi
        shell: bash
      - name: Upload archive as an artifact in case of failure
        if: failure() || cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: "artifact"
          path: |
            test.tar.gz
      - name: Export the docker image to a tar file
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          docker run --entrypoint /usr/bin/env --name ${CONTAINER_NAME}-${SCALAR_TYPE} ${IMAGE_NAME}-${SCALAR_TYPE} /bin/bash
          docker export --output=${CONTAINER_NAME}-${SCALAR_TYPE}.tar ${CONTAINER_NAME}-${SCALAR_TYPE}
      - name: Upload to the web server
        if: github.repository == 'numericalpdes/docker'
        run: |
          SCALAR_TYPE=${{ (inputs || github.event.inputs).scalar-type }}
          mkdir -p ~/.ssh
          echo "${{ secrets.WEB_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -o LogLevel=ERROR ${CONTAINER_NAME}-${SCALAR_TYPE}.tar ${{ secrets.WEB_USER }}@${{ secrets.WEB_SERVER }}:${{ secrets.WEB_HOME }}/${CONTAINER_NAME}-${SCALAR_TYPE}.tar.upl
          ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR ${{ secrets.WEB_USER }}@${{ secrets.WEB_SERVER }} "cd ${{ secrets.WEB_HOME }} && chmod ugo+r ${CONTAINER_NAME}-${SCALAR_TYPE}.tar.upl && mv ${CONTAINER_NAME}-${SCALAR_TYPE}.tar.upl ${CONTAINER_NAME}-${SCALAR_TYPE}.tar"

  wsl:
    runs-on: windows-latest
    needs: [release]
    steps:
      - name: Download archive containing the docker image
        run: |
          $SCALAR_TYPE="${{ (inputs || github.event.inputs).scalar-type }}"
          Import-Module BitsTransfer
          Start-BitsTransfer -Source "${{ secrets.WEB_URL }}/$env:CONTAINER_NAME-$SCALAR_TYPE.tar" -Destination "$env:CONTAINER_NAME-$SCALAR_TYPE.tar"
      - name: Create a new WSL container
        run: |
          $SCALAR_TYPE="${{ (inputs || github.event.inputs).scalar-type }}"
          wsl --import "$env:CONTAINER_NAME-$SCALAR_TYPE" "$env:CONTAINER_NAME-$SCALAR_TYPE.disk" "$env:CONTAINER_NAME-$SCALAR_TYPE.tar"
          Remove-Item -Path "$env:CONTAINER_NAME-$SCALAR_TYPE.tar"
