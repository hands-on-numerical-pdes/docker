name: Combine end user packages in a single docker image

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      CI_REGISTRY_USER:
        description: "Docker Hub username"
      CI_REGISTRY_PASSWORD:
        description: "Token that enables writing to Docker Hub"

env:
  IMAGE_NAME: numericalpdes/numericalpdes:latest
  CONTAINER_NAME: numericalpdes_numericalpdes

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Enable experimental docker features
        run: |
          sudo sed -i 's/}/,"experimental": true}/' /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Build docker image
        run: |
          docker build --pull --squash -t ${IMAGE_NAME} -f numericalpdes/Dockerfile .
      - name: Test docker image
        run: |
          docker run -i --entrypoint /usr/bin/env ${IMAGE_NAME} bash -c "cd /usr/local/share/fem-on-colab && wget https://github.com/multiphenics/nbvalx/raw/main/tests/notebooks/conftest.py -O conftest.py && pytest --nbval-cell-timeout=300 fenicsx/ firedrake/ gmsh/ ngsolve/"
      - name: Create an archive of test directory in case of failure
        if: failure() || cancelled()
        run: |
          FAILED_CONTAINER=$(docker ps -l -q)
          docker cp ${FAILED_CONTAINER}:/usr/local/share/fem-on-colab /tmp/test-failure
          tar czf test.tar.gz /tmp/test-failure
      - name: Log into the docker registry
        if: github.repository == 'numericalpdes/docker'
        run: docker login -u ${{ secrets.CI_REGISTRY_USER }} -p ${{ secrets.CI_REGISTRY_PASSWORD }}
      - name: Push to the docker registry
        if: github.repository == 'numericalpdes/docker'
        run: |
          docker push ${IMAGE_NAME}
      - name: Upload archive as an artifact in case of failure
        if: failure() || cancelled()
        uses: actions/upload-artifact@v2
        with:
          name: "artifact"
          path: |
            test.tar.gz
      - name: Export the docker image to a tar file
        run: |
          docker run --entrypoint /usr/bin/env --name ${CONTAINER_NAME} ${IMAGE_NAME} /bin/bash
          docker export --output=${CONTAINER_NAME}.tar ${CONTAINER_NAME}
      - name: Upload to the web server
        if: github.repository == 'numericalpdes/docker'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.WEB_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -o LogLevel=ERROR -oProxyCommand="ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -W %h:%p ${{ secrets.WEB_USER }}@${{ secrets.WEB_PROXY }}" ${CONTAINER_NAME}.tar ${{ secrets.WEB_USER }}@${{ secrets.WEB_SERVER }}:${{ secrets.WEB_HOME }}

  wsl:
    runs-on: windows-latest
    needs: [release]
    steps:
      - name: Download archive containing the docker image
        run: |
          Import-Module BitsTransfer
          Start-BitsTransfer -Source "${{ secrets.WEB_URL }}/$env:CONTAINER_NAME.tar" -Destination "$env:CONTAINER_NAME.tar"
      - name: Create a new WSL container
        run: wsl --import "$env:CONTAINER_NAME" "$env:CONTAINER_NAME.disk" "$env:CONTAINER_NAME.tar"
      - name: Test WSL container
        run: |
          wsl --distribution "$env:CONTAINER_NAME" bash -c "export PS1='mock' && source /root/.bashrc && cd /usr/local/share/fem-on-colab && wget https://github.com/multiphenics/nbvalx/raw/main/tests/notebooks/conftest.py -O conftest.py && pytest --nbval-cell-timeout=300 fenicsx/ firedrake/ gmsh/ ngsolve/"
